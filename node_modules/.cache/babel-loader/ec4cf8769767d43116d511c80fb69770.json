{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/src/views/app-views/components/data-display/table/DragSorting.js\";\nimport React, { Component } from \"react\";\nimport { Table } from \"antd\";\nimport { DndProvider, DragSource, DropTarget } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport update from \"immutability-helper\";\nlet dragingIndex = -1;\n\nclass BodyRow extends React.Component {\n  render() {\n    const {\n      isOver,\n      connectDragSource,\n      connectDropTarget,\n      moveRow,\n      ...restProps\n    } = this.props;\n    const style = { ...restProps.style,\n      cursor: \"move\"\n    };\n    let {\n      className\n    } = restProps;\n\n    if (isOver) {\n      if (restProps.index > dragingIndex) {\n        className += \" drop-over-downward\";\n      }\n\n      if (restProps.index < dragingIndex) {\n        className += \" drop-over-upward\";\n      }\n    }\n\n    return connectDragSource(connectDropTarget( /*#__PURE__*/_jsxDEV(\"tr\", { ...restProps,\n      className: className,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)));\n  }\n\n}\n\nconst rowSource = {\n  beginDrag(props) {\n    dragingIndex = props.index;\n    return {\n      index: props.index\n    };\n  }\n\n};\nconst rowTarget = {\n  drop(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index; // Don't replace items with themselves\n\n    if (dragIndex === hoverIndex) {\n      return;\n    } // Time to actually perform the action\n\n\n    props.moveRow(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n\n    monitor.getItem().index = hoverIndex;\n  }\n\n};\nconst DragableBodyRow = DropTarget(\"row\", rowTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver()\n}))(DragSource(\"row\", rowSource, connect => ({\n  connectDragSource: connect.dragSource()\n}))(BodyRow));\nconst columns = [{\n  title: \"Name\",\n  dataIndex: \"name\",\n  key: \"name\"\n}, {\n  title: \"Age\",\n  dataIndex: \"age\",\n  key: \"age\"\n}, {\n  title: \"Address\",\n  dataIndex: \"address\",\n  key: \"address\"\n}];\nexport class DragSorting extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [{\n        key: \"1\",\n        name: \"John Brown\",\n        age: 32,\n        address: \"New York No. 1 Lake Park\"\n      }, {\n        key: \"2\",\n        name: \"Jim Green\",\n        age: 42,\n        address: \"London No. 1 Lake Park\"\n      }, {\n        key: \"3\",\n        name: \"Joe Black\",\n        age: 32,\n        address: \"Sidney No. 1 Lake Park\"\n      }]\n    };\n    this.components = {\n      body: {\n        row: DragableBodyRow\n      }\n    };\n\n    this.moveRow = (dragIndex, hoverIndex) => {\n      const {\n        data\n      } = this.state;\n      const dragRow = data[dragIndex];\n      this.setState(update(this.state, {\n        data: {\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]]\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DndProvider, {\n      backend: HTML5Backend,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        dataSource: this.state.data,\n        components: this.components,\n        onRow: (record, index) => ({\n          index,\n          moveRow: this.moveRow\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default DragSorting;","map":{"version":3,"sources":["/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/src/views/app-views/components/data-display/table/DragSorting.js"],"names":["React","Component","Table","DndProvider","DragSource","DropTarget","HTML5Backend","update","dragingIndex","BodyRow","render","isOver","connectDragSource","connectDropTarget","moveRow","restProps","props","style","cursor","className","index","rowSource","beginDrag","rowTarget","drop","monitor","dragIndex","getItem","hoverIndex","DragableBodyRow","connect","dropTarget","dragSource","columns","title","dataIndex","key","DragSorting","state","data","name","age","address","components","body","row","dragRow","setState","$splice","record"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Table } from \"antd\";\r\nimport { DndProvider, DragSource, DropTarget } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport update from \"immutability-helper\";\r\n\r\nlet dragingIndex = -1;\r\n\r\nclass BodyRow extends React.Component {\r\n  render() {\r\n    const {\r\n      isOver,\r\n      connectDragSource,\r\n      connectDropTarget,\r\n      moveRow,\r\n      ...restProps\r\n    } = this.props;\r\n    const style = { ...restProps.style, cursor: \"move\" };\r\n\r\n    let { className } = restProps;\r\n    if (isOver) {\r\n      if (restProps.index > dragingIndex) {\r\n        className += \" drop-over-downward\";\r\n      }\r\n      if (restProps.index < dragingIndex) {\r\n        className += \" drop-over-upward\";\r\n      }\r\n    }\r\n\r\n    return connectDragSource(\r\n      connectDropTarget(\r\n        <tr {...restProps} className={className} style={style} />\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nconst rowSource = {\r\n  beginDrag(props) {\r\n    dragingIndex = props.index;\r\n    return {\r\n      index: props.index\r\n    };\r\n  }\r\n};\r\n\r\nconst rowTarget = {\r\n  drop(props, monitor) {\r\n    const dragIndex = monitor.getItem().index;\r\n    const hoverIndex = props.index;\r\n\r\n    // Don't replace items with themselves\r\n    if (dragIndex === hoverIndex) {\r\n      return;\r\n    }\r\n\r\n    // Time to actually perform the action\r\n    props.moveRow(dragIndex, hoverIndex);\r\n\r\n    // Note: we're mutating the monitor item here!\r\n    // Generally it's better to avoid mutations,\r\n    // but it's good here for the sake of performance\r\n    // to avoid expensive index searches.\r\n    monitor.getItem().index = hoverIndex;\r\n  }\r\n};\r\n\r\nconst DragableBodyRow = DropTarget(\"row\", rowTarget, (connect, monitor) => ({\r\n  connectDropTarget: connect.dropTarget(),\r\n  isOver: monitor.isOver()\r\n}))(\r\n  DragSource(\"row\", rowSource, connect => ({\r\n    connectDragSource: connect.dragSource()\r\n  }))(BodyRow)\r\n);\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\"\r\n  },\r\n  {\r\n    title: \"Age\",\r\n    dataIndex: \"age\",\r\n    key: \"age\"\r\n  },\r\n  {\r\n    title: \"Address\",\r\n    dataIndex: \"address\",\r\n    key: \"address\"\r\n  }\r\n];\r\n\r\nexport class DragSorting extends Component {\r\n  state = {\r\n    data: [\r\n      {\r\n        key: \"1\",\r\n        name: \"John Brown\",\r\n        age: 32,\r\n        address: \"New York No. 1 Lake Park\"\r\n      },\r\n      {\r\n        key: \"2\",\r\n        name: \"Jim Green\",\r\n        age: 42,\r\n        address: \"London No. 1 Lake Park\"\r\n      },\r\n      {\r\n        key: \"3\",\r\n        name: \"Joe Black\",\r\n        age: 32,\r\n        address: \"Sidney No. 1 Lake Park\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  components = {\r\n    body: {\r\n      row: DragableBodyRow\r\n    }\r\n  };\r\n\r\n  moveRow = (dragIndex, hoverIndex) => {\r\n    const { data } = this.state;\r\n    const dragRow = data[dragIndex];\r\n\r\n    this.setState(\r\n      update(this.state, {\r\n        data: {\r\n          $splice: [\r\n            [dragIndex, 1],\r\n            [hoverIndex, 0, dragRow]\r\n          ]\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <DndProvider backend={HTML5Backend}>\r\n        <Table\r\n          columns={columns}\r\n          dataSource={this.state.data}\r\n          components={this.components}\r\n          onRow={(record, index) => ({\r\n            index,\r\n            moveRow: this.moveRow\r\n          })}\r\n        />\r\n      </DndProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragSorting;\r\n"]},"metadata":{},"sourceType":"module"}