{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/src/views/app-views/components/data-entry/transfer/Search.js\";\nimport React, { Component } from \"react\";\nimport { Transfer } from \"antd\";\nexport class Search extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mockData: [],\n      targetKeys: []\n    };\n\n    this.getMock = () => {\n      const targetKeys = [];\n      const mockData = [];\n\n      for (let i = 0; i < 20; i++) {\n        const data = {\n          key: i.toString(),\n          title: `content${i + 1}`,\n          description: `description of content${i + 1}`,\n          chosen: Math.random() * 2 > 1\n        };\n\n        if (data.chosen) {\n          targetKeys.push(data.key);\n        }\n\n        mockData.push(data);\n      }\n\n      this.setState({\n        mockData,\n        targetKeys\n      });\n    };\n\n    this.filterOption = (inputValue, option) => option.description.indexOf(inputValue) > -1;\n\n    this.handleChange = targetKeys => {\n      this.setState({\n        targetKeys\n      });\n    };\n\n    this.handleSearch = (dir, value) => {\n      console.log(\"search:\", dir, value);\n    };\n  }\n\n  componentDidMount() {\n    this.getMock();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Transfer, {\n      dataSource: this.state.mockData,\n      showSearch: true,\n      filterOption: this.filterOption,\n      targetKeys: this.state.targetKeys,\n      onChange: this.handleChange,\n      onSearch: this.handleSearch,\n      render: item => item.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default Search;","map":{"version":3,"sources":["/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/src/views/app-views/components/data-entry/transfer/Search.js"],"names":["React","Component","Transfer","Search","state","mockData","targetKeys","getMock","i","data","key","toString","title","description","chosen","Math","random","push","setState","filterOption","inputValue","option","indexOf","handleChange","handleSearch","dir","value","console","log","componentDidMount","render","item"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,MAAzB;AAEA,OAAO,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;AAAA,SACpCG,KADoC,GAC5B;AACNC,MAAAA,QAAQ,EAAE,EADJ;AAENC,MAAAA,UAAU,EAAE;AAFN,KAD4B;;AAAA,SAUpCC,OAVoC,GAU1B,MAAM;AACd,YAAMD,UAAU,GAAG,EAAnB;AACA,YAAMD,QAAQ,GAAG,EAAjB;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,cAAMC,IAAI,GAAG;AACXC,UAAAA,GAAG,EAAEF,CAAC,CAACG,QAAF,EADM;AAEXC,UAAAA,KAAK,EAAG,UAASJ,CAAC,GAAG,CAAE,EAFZ;AAGXK,UAAAA,WAAW,EAAG,yBAAwBL,CAAC,GAAG,CAAE,EAHjC;AAIXM,UAAAA,MAAM,EAAEC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB;AAJjB,SAAb;;AAMA,YAAIP,IAAI,CAACK,MAAT,EAAiB;AACfR,UAAAA,UAAU,CAACW,IAAX,CAAgBR,IAAI,CAACC,GAArB;AACD;;AACDL,QAAAA,QAAQ,CAACY,IAAT,CAAcR,IAAd;AACD;;AACD,WAAKS,QAAL,CAAc;AAAEb,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAd;AACD,KA1BmC;;AAAA,SA4BpCa,YA5BoC,GA4BrB,CAACC,UAAD,EAAaC,MAAb,KACbA,MAAM,CAACR,WAAP,CAAmBS,OAAnB,CAA2BF,UAA3B,IAAyC,CAAC,CA7BR;;AAAA,SA+BpCG,YA/BoC,GA+BrBjB,UAAU,IAAI;AAC3B,WAAKY,QAAL,CAAc;AAAEZ,QAAAA;AAAF,OAAd;AACD,KAjCmC;;AAAA,SAmCpCkB,YAnCoC,GAmCrB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,GAAvB,EAA4BC,KAA5B;AACD,KArCmC;AAAA;;AAMpCG,EAAAA,iBAAiB,GAAG;AAClB,SAAKtB,OAAL;AACD;;AA+BDuB,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,QAAD;AACE,MAAA,UAAU,EAAE,KAAK1B,KAAL,CAAWC,QADzB;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,YAAY,EAAE,KAAKc,YAHrB;AAIE,MAAA,UAAU,EAAE,KAAKf,KAAL,CAAWE,UAJzB;AAKE,MAAA,QAAQ,EAAE,KAAKiB,YALjB;AAME,MAAA,QAAQ,EAAE,KAAKC,YANjB;AAOE,MAAA,MAAM,EAAEO,IAAI,IAAIA,IAAI,CAACnB;AAPvB;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAnDmC;AAsDtC,eAAeT,MAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Transfer } from \"antd\";\r\n\r\nexport class Search extends Component {\r\n  state = {\r\n    mockData: [],\r\n    targetKeys: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMock();\r\n  }\r\n\r\n  getMock = () => {\r\n    const targetKeys = [];\r\n    const mockData = [];\r\n    for (let i = 0; i < 20; i++) {\r\n      const data = {\r\n        key: i.toString(),\r\n        title: `content${i + 1}`,\r\n        description: `description of content${i + 1}`,\r\n        chosen: Math.random() * 2 > 1\r\n      };\r\n      if (data.chosen) {\r\n        targetKeys.push(data.key);\r\n      }\r\n      mockData.push(data);\r\n    }\r\n    this.setState({ mockData, targetKeys });\r\n  };\r\n\r\n  filterOption = (inputValue, option) =>\r\n    option.description.indexOf(inputValue) > -1;\r\n\r\n  handleChange = targetKeys => {\r\n    this.setState({ targetKeys });\r\n  };\r\n\r\n  handleSearch = (dir, value) => {\r\n    console.log(\"search:\", dir, value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Transfer\r\n        dataSource={this.state.mockData}\r\n        showSearch\r\n        filterOption={this.filterOption}\r\n        targetKeys={this.state.targetKeys}\r\n        onChange={this.handleChange}\r\n        onSearch={this.handleSearch}\r\n        render={item => item.title}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}