{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/src/views/app-views/components/data-entry/transfer/TreeTransfer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Transfer, Tree } from 'antd'; // Customize Table Transfer\n\nconst isChecked = (selectedKeys, eventKey) => selectedKeys.indexOf(eventKey) !== -1;\n\nconst generateTree = (treeNodes = [], checkedKeys = []) => treeNodes.map(({\n  children,\n  ...props\n}) => ({ ...props,\n  disabled: checkedKeys.includes(props.key),\n  children: generateTree(children, checkedKeys)\n}));\n\nconst TreeTransfer = ({\n  dataSource,\n  targetKeys,\n  ...restProps\n}) => {\n  const transferDataSource = [];\n\n  function flatten(list = []) {\n    list.forEach(item => {\n      transferDataSource.push(item);\n      flatten(item.children);\n    });\n  }\n\n  flatten(dataSource);\n  return /*#__PURE__*/_jsxDEV(Transfer, { ...restProps,\n    targetKeys: targetKeys,\n    dataSource: transferDataSource,\n    className: \"tree-transfer\",\n    render: item => item.title,\n    showSelectAll: false,\n    children: ({\n      direction,\n      onItemSelect,\n      selectedKeys\n    }) => {\n      if (direction === 'left') {\n        const checkedKeys = [...selectedKeys, ...targetKeys];\n        return /*#__PURE__*/_jsxDEV(Tree, {\n          blockNode: true,\n          checkable: true,\n          checkStrictly: true,\n          defaultExpandAll: true,\n          checkedKeys: checkedKeys,\n          treeData: generateTree(dataSource, targetKeys),\n          onCheck: (_, {\n            node: {\n              key\n            }\n          }) => {\n            onItemSelect(key, !isChecked(checkedKeys, key));\n          },\n          onSelect: (_, {\n            node: {\n              key\n            }\n          }) => {\n            onItemSelect(key, !isChecked(checkedKeys, key));\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TreeTransfer;\nconst treeData = [{\n  key: '0-0',\n  title: '0-0'\n}, {\n  key: '0-1',\n  title: '0-1',\n  children: [{\n    key: '0-1-0',\n    title: '0-1-0'\n  }, {\n    key: '0-1-1',\n    title: '0-1-1'\n  }]\n}, {\n  key: '0-2',\n  title: '0-3'\n}];\n\nconst TransferTreeTransfer = () => {\n  _s();\n\n  const [targetKeys, setTargetKeys] = useState([]);\n\n  const onChange = keys => {\n    setTargetKeys(keys);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TreeTransfer, {\n    dataSource: treeData,\n    targetKeys: targetKeys,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n\n_s(TransferTreeTransfer, \"b2DaZ1aGGtNtgoVMhAk+87+c0uk=\");\n\n_c2 = TransferTreeTransfer;\nexport default TransferTreeTransfer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TreeTransfer\");\n$RefreshReg$(_c2, \"TransferTreeTransfer\");","map":{"version":3,"sources":["/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/src/views/app-views/components/data-entry/transfer/TreeTransfer.js"],"names":["React","useState","Transfer","Tree","isChecked","selectedKeys","eventKey","indexOf","generateTree","treeNodes","checkedKeys","map","children","props","disabled","includes","key","TreeTransfer","dataSource","targetKeys","restProps","transferDataSource","flatten","list","forEach","item","push","title","direction","onItemSelect","_","node","treeData","TransferTreeTransfer","setTargetKeys","onChange","keys"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Transfer, Tree } from 'antd';\r\n\r\n// Customize Table Transfer\r\nconst isChecked = (selectedKeys, eventKey) => selectedKeys.indexOf(eventKey) !== -1;\r\n\r\nconst generateTree = (treeNodes = [], checkedKeys = []) =>\r\n  treeNodes.map(({ children, ...props }) => ({\r\n    ...props,\r\n    disabled: checkedKeys.includes(props.key),\r\n    children: generateTree(children, checkedKeys),\r\n  }));\r\n\r\nconst TreeTransfer = ({ dataSource, targetKeys, ...restProps }) => {\r\n  const transferDataSource = [];\r\n  function flatten(list = []) {\r\n    list.forEach(item => {\r\n      transferDataSource.push(item);\r\n      flatten(item.children);\r\n    });\r\n  }\r\n  flatten(dataSource);\r\n\r\n  return (\r\n    <Transfer\r\n      {...restProps}\r\n      targetKeys={targetKeys}\r\n      dataSource={transferDataSource}\r\n      className=\"tree-transfer\"\r\n      render={item => item.title}\r\n      showSelectAll={false}\r\n    >\r\n      {({ direction, onItemSelect, selectedKeys }) => {\r\n        if (direction === 'left') {\r\n          const checkedKeys = [...selectedKeys, ...targetKeys];\r\n          return (\r\n            <Tree\r\n              blockNode\r\n              checkable\r\n              checkStrictly\r\n              defaultExpandAll\r\n              checkedKeys={checkedKeys}\r\n              treeData={generateTree(dataSource, targetKeys)}\r\n              onCheck={(_, { node: { key } }) => {\r\n                onItemSelect(key, !isChecked(checkedKeys, key));\r\n              }}\r\n              onSelect={(_, { node: { key } }) => {\r\n                onItemSelect(key, !isChecked(checkedKeys, key));\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    </Transfer>\r\n  );\r\n};\r\n\r\nconst treeData = [\r\n  { key: '0-0', title: '0-0' },\r\n  {\r\n    key: '0-1',\r\n    title: '0-1',\r\n    children: [\r\n      { key: '0-1-0', title: '0-1-0' },\r\n      { key: '0-1-1', title: '0-1-1' },\r\n    ],\r\n  },\r\n  { key: '0-2', title: '0-3' },\r\n];\r\n\r\nconst TransferTreeTransfer = () => {\r\n  const [targetKeys, setTargetKeys] = useState([]);\r\n  const onChange = keys => {\r\n    setTargetKeys(keys);\r\n  };\r\n  return <TreeTransfer dataSource={treeData} targetKeys={targetKeys} onChange={onChange} />;\r\n};\r\n\r\nexport default TransferTreeTransfer;\r\n"]},"metadata":{},"sourceType":"module"}