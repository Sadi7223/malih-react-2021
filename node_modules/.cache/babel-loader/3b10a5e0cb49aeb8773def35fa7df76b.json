{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerScrollListener = registerScrollListener;\nexports.unregisterScrollListener = unregisterScrollListener;\n\nvar _requestAnimationTimeout = require(\"../../utils/requestAnimationTimeout\");\n\nvar _WindowScroller = require(\"../WindowScroller.js\");\n\nvar mountedInstances = [];\nvar originalBodyPointerEvents = null;\nvar disablePointerEventsTimeoutId = null;\n\nfunction enablePointerEventsIfDisabled() {\n  if (disablePointerEventsTimeoutId) {\n    disablePointerEventsTimeoutId = null;\n\n    if (document.body && originalBodyPointerEvents != null) {\n      document.body.style.pointerEvents = originalBodyPointerEvents;\n    }\n\n    originalBodyPointerEvents = null;\n  }\n}\n\nfunction enablePointerEventsAfterDelayCallback() {\n  enablePointerEventsIfDisabled();\n  mountedInstances.forEach(function (instance) {\n    return instance.__resetIsScrolling();\n  });\n}\n\nfunction enablePointerEventsAfterDelay() {\n  if (disablePointerEventsTimeoutId) {\n    (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);\n  }\n\n  var maximumTimeout = 0;\n  mountedInstances.forEach(function (instance) {\n    maximumTimeout = Math.max(maximumTimeout, instance.props.scrollingResetTimeInterval);\n  });\n  disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(enablePointerEventsAfterDelayCallback, maximumTimeout);\n}\n\nfunction onScrollWindow(event) {\n  if (event.currentTarget === window && originalBodyPointerEvents == null && document.body) {\n    originalBodyPointerEvents = document.body.style.pointerEvents;\n    document.body.style.pointerEvents = 'none';\n  }\n\n  enablePointerEventsAfterDelay();\n  mountedInstances.forEach(function (instance) {\n    if (instance.props.scrollElement === event.currentTarget) {\n      instance.__handleWindowScrollEvent();\n    }\n  });\n}\n\nfunction registerScrollListener(component, element) {\n  if (!mountedInstances.some(function (instance) {\n    return instance.props.scrollElement === element;\n  })) {\n    element.addEventListener('scroll', onScrollWindow);\n  }\n\n  mountedInstances.push(component);\n}\n\nfunction unregisterScrollListener(component, element) {\n  mountedInstances = mountedInstances.filter(function (instance) {\n    return instance !== component;\n  });\n\n  if (!mountedInstances.length) {\n    element.removeEventListener('scroll', onScrollWindow);\n\n    if (disablePointerEventsTimeoutId) {\n      (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);\n      enablePointerEventsIfDisabled();\n    }\n  }\n}","map":{"version":3,"sources":["/home/mathews/Reesby/React/NewMalihUI/emilusAntTheme-main/Emilus - React Admin Template/demo/node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/onScroll.js"],"names":["Object","defineProperty","exports","value","registerScrollListener","unregisterScrollListener","_requestAnimationTimeout","require","_WindowScroller","mountedInstances","originalBodyPointerEvents","disablePointerEventsTimeoutId","enablePointerEventsIfDisabled","document","body","style","pointerEvents","enablePointerEventsAfterDelayCallback","forEach","instance","__resetIsScrolling","enablePointerEventsAfterDelay","cancelAnimationTimeout","maximumTimeout","Math","max","props","scrollingResetTimeInterval","requestAnimationTimeout","onScrollWindow","event","currentTarget","window","scrollElement","__handleWindowScrollEvent","component","element","some","addEventListener","push","filter","length","removeEventListener"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerScrollListener = registerScrollListener;\nexports.unregisterScrollListener = unregisterScrollListener;\n\nvar _requestAnimationTimeout = require(\"../../utils/requestAnimationTimeout\");\n\nvar _WindowScroller = require(\"../WindowScroller.js\");\n\nvar mountedInstances = [];\nvar originalBodyPointerEvents = null;\nvar disablePointerEventsTimeoutId = null;\n\nfunction enablePointerEventsIfDisabled() {\n  if (disablePointerEventsTimeoutId) {\n    disablePointerEventsTimeoutId = null;\n\n    if (document.body && originalBodyPointerEvents != null) {\n      document.body.style.pointerEvents = originalBodyPointerEvents;\n    }\n\n    originalBodyPointerEvents = null;\n  }\n}\n\nfunction enablePointerEventsAfterDelayCallback() {\n  enablePointerEventsIfDisabled();\n  mountedInstances.forEach(function (instance) {\n    return instance.__resetIsScrolling();\n  });\n}\n\nfunction enablePointerEventsAfterDelay() {\n  if (disablePointerEventsTimeoutId) {\n    (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);\n  }\n\n  var maximumTimeout = 0;\n  mountedInstances.forEach(function (instance) {\n    maximumTimeout = Math.max(maximumTimeout, instance.props.scrollingResetTimeInterval);\n  });\n  disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(enablePointerEventsAfterDelayCallback, maximumTimeout);\n}\n\nfunction onScrollWindow(event) {\n  if (event.currentTarget === window && originalBodyPointerEvents == null && document.body) {\n    originalBodyPointerEvents = document.body.style.pointerEvents;\n    document.body.style.pointerEvents = 'none';\n  }\n\n  enablePointerEventsAfterDelay();\n  mountedInstances.forEach(function (instance) {\n    if (instance.props.scrollElement === event.currentTarget) {\n      instance.__handleWindowScrollEvent();\n    }\n  });\n}\n\nfunction registerScrollListener(component, element) {\n  if (!mountedInstances.some(function (instance) {\n    return instance.props.scrollElement === element;\n  })) {\n    element.addEventListener('scroll', onScrollWindow);\n  }\n\n  mountedInstances.push(component);\n}\n\nfunction unregisterScrollListener(component, element) {\n  mountedInstances = mountedInstances.filter(function (instance) {\n    return instance !== component;\n  });\n\n  if (!mountedInstances.length) {\n    element.removeEventListener('scroll', onScrollWindow);\n\n    if (disablePointerEventsTimeoutId) {\n      (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);\n      enablePointerEventsIfDisabled();\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}