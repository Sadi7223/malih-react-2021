{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mathews/Reesby/React/NewMalihUI/src/views/app-views/apps/project/scrumboard/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { ScrumboardProvider, ScrumboardContext } from './ScrumboardContext';\nimport Board from './Board';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { Avatar } from 'antd';\nimport reorder, { reorderQuoteMap } from './reoreder';\nimport { memberIds } from './ScrumboardData';\nimport ModalForm from './ModalForm';\nimport { modalModeTypes, createCardObject, AssigneeAvatar } from './utils';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\nconst ScrumboardWrapper = props => {\n  _s();\n\n  const {\n    ordered,\n    columns,\n    modal,\n    cardData,\n    currentListId,\n    modalMode,\n    updateOrdered,\n    updateColumns,\n    updateModal,\n    updateCurrentListId\n  } = useContext(ScrumboardContext);\n\n  const onDragEnd = result => {\n    if (result.combine) {\n      if (result.type === 'COLUMN') {\n        const shallow = [...ordered];\n        shallow.splice(result.source.index, 1);\n        updateOrdered(shallow);\n        return;\n      }\n\n      const column = columns[result.source.droppableId];\n      const withQuoteRemoved = [...column];\n      withQuoteRemoved.splice(result.source.index, 1);\n      const newColumns = { ...columns,\n        [result.source.droppableId]: withQuoteRemoved\n      };\n      updateColumns(newColumns);\n      return;\n    }\n\n    if (!result.destination) {\n      return;\n    }\n\n    const source = result.source;\n    const destination = result.destination;\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    if (result.type === 'COLUMN') {\n      const newOrdered = reorder(ordered, source.index, destination.index);\n      updateOrdered(newOrdered);\n      return;\n    }\n\n    const data = reorderQuoteMap({\n      quoteMap: columns,\n      source,\n      destination\n    });\n    updateColumns(data.quoteMap);\n  };\n\n  const onCloseModal = () => {\n    updateModal(false);\n  };\n\n  const onModalSubmit = (values, mode) => {\n    const data = columns;\n\n    if (mode === modalModeTypes(0)) {\n      let newCard = createCardObject();\n      newCard.name = values.cardTitle ? values.cardTitle : 'Untitled Card';\n      data[currentListId].push(newCard);\n      updateColumns(data);\n      updateModal(false);\n      updateCurrentListId('');\n    }\n\n    if (mode === modalModeTypes(1)) {\n      const updatadedCard = data[currentListId].map(elm => {\n        if (values.id === elm.id) {\n          elm = values;\n        }\n\n        return elm;\n      });\n      data[currentListId] = updatadedCard;\n      updateColumns(data);\n      updateModal(false);\n    }\n\n    if (mode === modalModeTypes(2)) {\n      data[values.boardTitle ? values.boardTitle : 'Untitled Board'] = [];\n      const newOrdered = [...ordered, ...[values.boardTitle ? values.boardTitle : 'Untitled Board']];\n      let newColumns = {};\n      newOrdered.forEach(elm => {\n        newColumns[elm] = data[elm];\n      });\n      updateColumns(newColumns);\n      updateOrdered(Object.keys(newColumns));\n      updateModal(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result),\n      children: props.containerHeight ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scrumboard\",\n        children: /*#__PURE__*/_jsxDEV(BoardWrapper, { ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(BoardWrapper, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(ModalForm, {\n      visible: modal,\n      onClose: () => onCloseModal(),\n      onModalSubmit: (values, modalMode) => onModalSubmit(values, modalMode),\n      modalMode: modalMode,\n      cardData: cardData,\n      listId: currentListId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ScrumboardWrapper, \"KsPFhTJWCmQKfFXsWrCEr2vpJe8=\");\n\n_c = ScrumboardWrapper;\n\nconst BoardWrapper = ({\n  containerHeight,\n  useClone,\n  isCombineEnabled,\n  withScrollableColumns\n}) => {\n  _s2();\n\n  const {\n    ordered,\n    columns,\n    updateModal,\n    updateModalMode\n  } = useContext(ScrumboardContext);\n\n  const onAddBoardModal = () => {\n    updateModal(true);\n    updateModalMode(modalModeTypes(2));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Droppable, {\n    droppableId: \"board\",\n    type: \"COLUMN\",\n    direction: \"horizontal\",\n    ignoreContainerClipping: containerHeight,\n    isCombineEnabled: isCombineEnabled,\n    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scrumboard\",\n      ref: provided.innerRef,\n      ...provided.droppableProps,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scrumboard-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Backlog\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex align-items-center\",\n            children: [memberIds.map((member, i) => i < 4 ? /*#__PURE__*/_jsxDEV(AssigneeAvatar, {\n              id: member,\n              size: 30,\n              chain: true\n            }, member, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 47\n            }, this) : null), /*#__PURE__*/_jsxDEV(Avatar, {\n              className: \"ml-n2\",\n              size: 30,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-gray font-weight-semibold font-size-base\",\n                children: \"+9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 10\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Scrollbars, {\n        className: \"scrumboard-body\",\n        children: [ordered.map((key, index) => /*#__PURE__*/_jsxDEV(Board, {\n          index: index,\n          title: key,\n          contents: columns[key],\n          isScrollable: withScrollableColumns,\n          isCombineEnabled: isCombineEnabled,\n          useClone: useClone\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 8\n        }, this)), provided.placeholder, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-column add\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-title\",\n            onClick: () => onAddBoardModal(),\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-0\",\n              children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Add List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(BoardWrapper, \"B00t2mUKH0nVAiHEyuD6lbYNZgw=\");\n\n_c2 = BoardWrapper;\n\nconst Scrumboard = props => {\n  return /*#__PURE__*/_jsxDEV(ScrumboardProvider, {\n    children: /*#__PURE__*/_jsxDEV(ScrumboardWrapper, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 3\n  }, this);\n};\n\n_c3 = Scrumboard;\nexport default Scrumboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ScrumboardWrapper\");\n$RefreshReg$(_c2, \"BoardWrapper\");\n$RefreshReg$(_c3, \"Scrumboard\");","map":{"version":3,"sources":["/home/mathews/Reesby/React/NewMalihUI/src/views/app-views/apps/project/scrumboard/index.js"],"names":["React","useContext","ScrumboardProvider","ScrumboardContext","Board","DragDropContext","Droppable","PlusOutlined","Avatar","reorder","reorderQuoteMap","memberIds","ModalForm","modalModeTypes","createCardObject","AssigneeAvatar","Scrollbars","ScrumboardWrapper","props","ordered","columns","modal","cardData","currentListId","modalMode","updateOrdered","updateColumns","updateModal","updateCurrentListId","onDragEnd","result","combine","type","shallow","splice","source","index","column","droppableId","withQuoteRemoved","newColumns","destination","newOrdered","data","quoteMap","onCloseModal","onModalSubmit","values","mode","newCard","name","cardTitle","push","updatadedCard","map","elm","id","boardTitle","forEach","Object","keys","containerHeight","BoardWrapper","useClone","isCombineEnabled","withScrollableColumns","updateModalMode","onAddBoardModal","provided","innerRef","droppableProps","member","i","key","placeholder","Scrumboard"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\r\nimport { ScrumboardProvider, ScrumboardContext } from './ScrumboardContext'\r\nimport Board from './Board';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport { Avatar  } from 'antd';\r\nimport reorder, { reorderQuoteMap } from './reoreder'\r\nimport { memberIds } from './ScrumboardData';\r\nimport ModalForm from './ModalForm';\r\nimport { modalModeTypes, createCardObject, AssigneeAvatar } from './utils';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nconst ScrumboardWrapper = props => {\r\n\tconst { \r\n\t\tordered,\r\n\t\tcolumns,\r\n\t\tmodal,\r\n\t\tcardData,\r\n\t\tcurrentListId,\r\n\t\tmodalMode,\r\n\t\tupdateOrdered,\r\n\t\tupdateColumns,\r\n\t\tupdateModal,\r\n\t\tupdateCurrentListId\r\n\t} = useContext(ScrumboardContext)\r\n\r\n\tconst onDragEnd = result => {\r\n    if (result.combine) {\r\n      if (result.type === 'COLUMN') {\r\n        const shallow = [...ordered];\r\n        shallow.splice(result.source.index, 1);\r\n\t\t\t\tupdateOrdered(shallow)\r\n        return;\r\n      }\r\n\r\n      const column = columns[result.source.droppableId];\r\n      const withQuoteRemoved = [...column];\r\n      withQuoteRemoved.splice(result.source.index, 1);\r\n      const newColumns = {\r\n        ...columns,\r\n        [result.source.droppableId]: withQuoteRemoved,\r\n\t\t\t};\r\n\t\t\tupdateColumns(newColumns)\r\n      return;\r\n    }\r\n\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const source = result.source;\r\n    const destination = result.destination;\r\n\r\n    if (\r\n      source.droppableId === destination.droppableId && source.index === destination.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (result.type === 'COLUMN') {\r\n      const newOrdered = reorder(\r\n        ordered,\r\n        source.index,\r\n        destination.index,\r\n      );\r\n\t\t\tupdateOrdered(newOrdered)\r\n      return;\r\n    }\r\n    const data = reorderQuoteMap({\r\n      quoteMap: columns,\r\n      source,\r\n      destination,\r\n    });\r\n\t\tupdateColumns(data.quoteMap)\r\n\t}\r\n\t\r\n\tconst onCloseModal = () => {\r\n\t\tupdateModal(false)\r\n\t}\r\n\r\n\tconst onModalSubmit = (values, mode) => {\r\n\t\tconst data = columns\r\n    if(mode === modalModeTypes(0)) {\r\n\t\t\tlet newCard = createCardObject()\r\n\t\t\tnewCard.name = values.cardTitle ? values.cardTitle : 'Untitled Card'\r\n\t\t\tdata[currentListId].push(newCard)\r\n\t\t\tupdateColumns(data)\r\n\t\t\tupdateModal(false)\r\n\t\t\tupdateCurrentListId('')\r\n    }\r\n\r\n    if(mode === modalModeTypes(1)) {\r\n      const updatadedCard = data[currentListId].map(elm => {\r\n        if(values.id === elm.id) {\r\n          elm = values\r\n        }\r\n        return elm\r\n\t\t\t})\r\n\t  \tdata[currentListId] = updatadedCard\r\n\t\t\tupdateColumns(data)\r\n\t\t\tupdateModal(false)\r\n    }\r\n\r\n    if(mode === modalModeTypes(2)) {\r\n\t\t\tdata[values.boardTitle? values.boardTitle : 'Untitled Board'] = [];\r\n\t\t\tconst newOrdered = [...ordered, ...[values.boardTitle? values.boardTitle : 'Untitled Board']]\r\n\t\t\tlet newColumns = {}\r\n\t\t\tnewOrdered.forEach(elm => {\r\n\t\t\t\tnewColumns[elm] = data[elm]\r\n\t\t\t});\r\n\t\t\tupdateColumns(newColumns)\r\n\t\t\tupdateOrdered(Object.keys(newColumns))\r\n\t\t\tupdateModal(false)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<DragDropContext onDragEnd={result => onDragEnd(result)}>\r\n\t\t\t\t{props.containerHeight ? (\r\n\t\t\t\t\t<div className=\"scrumboard\">\r\n\t\t\t\t\t\t<BoardWrapper {...props}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<BoardWrapper {...props}/>\r\n\t\t\t\t)}\r\n\t\t\t</DragDropContext>\r\n\t\t\t<ModalForm \r\n\t\t\t\tvisible={modal} \r\n\t\t\t\tonClose={() => onCloseModal()} \r\n\t\t\t\tonModalSubmit={(values, modalMode) => onModalSubmit(values, modalMode)}\r\n\t\t\t\tmodalMode={modalMode}\r\n\t\t\t\tcardData={cardData}\r\n\t\t\t\tlistId={currentListId}\r\n\t\t\t/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst BoardWrapper = ({ containerHeight, useClone, isCombineEnabled, withScrollableColumns }) => {\r\n\tconst { ordered, columns, updateModal, updateModalMode } = useContext(ScrumboardContext)\r\n\r\n\tconst onAddBoardModal = () => {\r\n\t\tupdateModal(true)\r\n\t\tupdateModalMode(modalModeTypes(2))\r\n\t} \r\n\treturn (\r\n\t\t<Droppable\r\n\t\t\tdroppableId=\"board\"\r\n\t\t\ttype=\"COLUMN\"\r\n\t\t\tdirection=\"horizontal\"\r\n\t\t\tignoreContainerClipping={containerHeight}\r\n\t\t\tisCombineEnabled={isCombineEnabled}\r\n\t\t>\r\n\t\t\t{(provided) => (\r\n\t\t\t\t<div className=\"scrumboard\" ref={provided.innerRef} {...provided.droppableProps}>\r\n\t\t\t\t\t<div className=\"scrumboard-header\">\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h3>Backlog</h3>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t\t\t<div className=\"d-flex align-items-center\">\r\n\t\t\t\t\t\t\t\t{memberIds.map((member, i) => i < 4 ? <AssigneeAvatar key={member} id={member} size={30} chain/> : null)}\r\n\t\t\t\t\t\t\t\t<Avatar className=\"ml-n2\" size={30}>\r\n\t\t\t\t\t\t\t\t\t<span className=\"text-gray font-weight-semibold font-size-base\">+9</span>\r\n\t\t\t\t\t\t\t\t</Avatar>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Scrollbars className=\"scrumboard-body\">\r\n\t\t\t\t\t\t{ordered.map((key, index) => (\r\n\t\t\t\t\t\t\t<Board\r\n\t\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\ttitle={key}\r\n\t\t\t\t\t\t\t\tcontents={columns[key]}\r\n\t\t\t\t\t\t\t\tisScrollable={withScrollableColumns}\r\n\t\t\t\t\t\t\t\tisCombineEnabled={isCombineEnabled}\r\n\t\t\t\t\t\t\t\tuseClone={useClone}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t\t\t<div className=\"board-column add\">\r\n\t\t\t\t\t\t\t<div className=\"board-title\" onClick={() => onAddBoardModal()}>\r\n\t\t\t\t\t\t\t\t<h4 className=\"mb-0\">\r\n\t\t\t\t\t\t\t\t\t<PlusOutlined />\r\n\t\t\t\t\t\t\t\t\t<span>Add List</span>\r\n\t\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Scrollbars>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Droppable>\r\n\t)\r\n}\r\n\r\nconst Scrumboard = props => {\r\n\treturn (\r\n\t\t<ScrumboardProvider>\r\n\t\t\t<ScrumboardWrapper {...props} />\r\n\t\t</ScrumboardProvider>\r\n\t)\r\n}\r\n\r\nexport default Scrumboard\r\n"]},"metadata":{},"sourceType":"module"}