{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/mathews/Reesby/React/NewMalihUI/src/views/app-views/apps/project/scrumboard/Board.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { ScrumboardContext } from './ScrumboardContext';\nimport { Draggable } from 'react-beautiful-dnd';\nimport BoardCard from './BoardCard';\nimport { modalModeTypes } from './utils';\nimport EllipsisDropdown from 'components/shared-components/EllipsisDropdown';\nimport { Menu, Form, Input, Modal } from 'antd';\nimport { CloseOutlined, EditOutlined, DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\n\nconst RenameForm = ({\n  title,\n  finish\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const onRenameSubmit = values => {\n    finish(values.title);\n  };\n\n  const onClose = () => {\n    form.submit();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    name: \"renameField\",\n    onFinish: onRenameSubmit,\n    layout: \"vertical\",\n    autoComplete: \"off\",\n    className: \"w-100\",\n    initialValues: {\n      title: title\n    },\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"title\",\n      className: \"mb-0\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        autoFocus: true,\n        value: title,\n        suffix: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cursor-pointer\",\n          onClick: () => onClose(),\n          children: /*#__PURE__*/_jsxDEV(CloseOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this);\n};\n\n_s(RenameForm, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = RenameForm;\n\nconst Board = ({\n  title,\n  contents,\n  index,\n  isScrollable,\n  isCombineEnabled,\n  useClone\n}) => {\n  _s2();\n\n  const {\n    updateModal,\n    updateModalMode,\n    updateCurrentListId,\n    updateCardData,\n    columns,\n    updateColumns,\n    ordered,\n    updateOrdered\n  } = useContext(ScrumboardContext);\n  const [renameActive, setRenameActive] = useState('');\n\n  const newCard = listId => {\n    updateModal(true);\n    updateModalMode(modalModeTypes(0));\n    updateCurrentListId(listId);\n  };\n\n  const onUpdateCardModal = (obj, listId) => {\n    updateModal(true);\n    updateModalMode(modalModeTypes(1));\n    updateCurrentListId(listId);\n    updateCardData(obj);\n  };\n\n  const onTitleClick = title => {\n    setRenameActive(title);\n  };\n\n  const onFinish = newTitle => {\n    if (newTitle) {\n      const newColumns = {};\n      delete Object.assign(newColumns, columns, {\n        [newTitle]: columns[title]\n      })[title];\n      const newOrder = ordered.map(elm => {\n        if (elm === title) {\n          return newTitle;\n        }\n\n        return elm;\n      });\n      updateColumns(newColumns);\n      updateOrdered(newOrder);\n    }\n\n    setRenameActive('');\n  };\n\n  const onBoardDelete = title => {\n    Modal.confirm({\n      title: 'Do you want to delete this board?',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 10\n      }, this),\n      okText: 'Yes',\n      cancelText: 'Cancel',\n\n      onOk() {\n        const newOrder = ordered.filter(elm => elm !== title);\n        const newColumns = {};\n        Object.assign(newColumns, columns);\n        delete newColumns[title];\n        updateColumns(newColumns);\n        updateOrdered(newOrder);\n      }\n\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Draggable, {\n    draggableId: title,\n    index: index,\n    children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-column\",\n      ref: provided.innerRef,\n      ...provided.draggableProps,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-title\",\n        ...provided.dragHandleProps,\n        children: renameActive === title ? /*#__PURE__*/_jsxDEV(RenameForm, {\n          title: title,\n          finish: onFinish\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 10\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-0\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(EllipsisDropdown, {\n            menu: /*#__PURE__*/_jsxDEV(Menu, {\n              children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n                onClick: () => onTitleClick(title),\n                children: [/*#__PURE__*/_jsxDEV(EditOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Rename Board\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n                onClick: () => onBoardDelete(title),\n                children: [/*#__PURE__*/_jsxDEV(DeleteOutlined, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"Delete Board\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 12\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(BoardCard, {\n        listId: title,\n        listType: \"CONTENT\",\n        className: snapshot.isDragging ? 'is-dragging' : '',\n        contents: contents,\n        internalScroll: isScrollable,\n        isCombineEnabled: isCombineEnabled,\n        useClone: useClone,\n        cardData: onUpdateCardModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-add\",\n        onClick: () => newCard(title),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Add task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Board, \"JUF0J4eU/T8SOhW9302UHmB+m0Y=\");\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenameForm\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/home/mathews/Reesby/React/NewMalihUI/src/views/app-views/apps/project/scrumboard/Board.js"],"names":["React","useContext","useState","ScrumboardContext","Draggable","BoardCard","modalModeTypes","EllipsisDropdown","Menu","Form","Input","Modal","CloseOutlined","EditOutlined","DeleteOutlined","ExclamationCircleOutlined","RenameForm","title","finish","form","useForm","onRenameSubmit","values","onClose","submit","Board","contents","index","isScrollable","isCombineEnabled","useClone","updateModal","updateModalMode","updateCurrentListId","updateCardData","columns","updateColumns","ordered","updateOrdered","renameActive","setRenameActive","newCard","listId","onUpdateCardModal","obj","onTitleClick","onFinish","newTitle","newColumns","Object","assign","newOrder","map","elm","onBoardDelete","confirm","icon","okText","cancelText","onOk","filter","provided","snapshot","innerRef","draggableProps","dragHandleProps","isDragging"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { ScrumboardContext } from './ScrumboardContext'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport BoardCard from './BoardCard';\r\nimport { modalModeTypes } from './utils';\r\nimport EllipsisDropdown from 'components/shared-components/EllipsisDropdown'\r\nimport { Menu, Form, Input, Modal } from 'antd'\r\nimport { CloseOutlined, EditOutlined, DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nconst RenameForm = ({ title, finish }) => {\r\n\tconst [form] = Form.useForm();\r\n\r\n\tconst onRenameSubmit = values => {\r\n\t\tfinish(values.title)\r\n\t};\r\n\r\n\tconst onClose = () => {\r\n    form.submit();\r\n  };\r\n \r\n\treturn (\r\n\t\t<Form \r\n\t\t\tform={form}\r\n\t\t\tname=\"renameField\" \r\n\t\t\tonFinish={onRenameSubmit} \r\n\t\t\tlayout=\"vertical\"\r\n\t\t\tautoComplete=\"off\"\r\n\t\t\tclassName=\"w-100\"\r\n\t\t\tinitialValues={{\r\n\t\t\t\ttitle: title,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Form.Item name=\"title\" className=\"mb-0\">\r\n\t\t\t\t<Input \r\n\t\t\t\t\tautoFocus \r\n\t\t\t\t\tvalue={title} \r\n\t\t\t\t\tsuffix={\r\n\t\t\t\t\t\t<div className=\"cursor-pointer\" onClick={() => onClose()}>\r\n\t\t\t\t\t\t\t<CloseOutlined />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</Form.Item>\r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\nconst Board = ({ title, contents, index, isScrollable, isCombineEnabled, useClone }) => {\r\n\tconst { updateModal, updateModalMode, updateCurrentListId, updateCardData, columns, updateColumns, ordered, updateOrdered } = useContext(ScrumboardContext)\r\n\tconst [renameActive, setRenameActive] = useState('')\r\n\r\n\tconst newCard = listId => {\r\n\t\tupdateModal(true)\r\n\t\tupdateModalMode(modalModeTypes(0))\r\n\t\tupdateCurrentListId(listId)\r\n\t}\t\r\n\r\n\tconst onUpdateCardModal = (obj, listId) => {\r\n\t\tupdateModal(true)\r\n\t\tupdateModalMode(modalModeTypes(1))\r\n\t\tupdateCurrentListId(listId)\r\n\t\tupdateCardData(obj)\r\n\t}\r\n\t\r\n\tconst onTitleClick = title => {\r\n\t\tsetRenameActive(title)\r\n\t}\r\n\r\n\tconst onFinish = newTitle => {\r\n\t\tif(newTitle) {\r\n\t\t\tconst newColumns = {};\r\n\t\t\tdelete Object.assign(newColumns, columns, {[newTitle]: columns[title] })[title];\r\n\t\t\tconst newOrder = ordered.map(elm => {\r\n\t\t\t\tif(elm === title) {\r\n\t\t\t\t\treturn newTitle\r\n\t\t\t\t}\r\n\t\t\t\treturn elm\r\n\t\t\t})\r\n\t\t\tupdateColumns(newColumns)\r\n\t\t\tupdateOrdered(newOrder)\r\n\t\t}\r\n\t\tsetRenameActive('')\r\n\t};\r\n\r\n\tconst onBoardDelete = title => {\r\n\t\tModal.confirm({\r\n\t\t\ttitle: 'Do you want to delete this board?',\r\n\t\t\ticon: <ExclamationCircleOutlined />,\r\n\t\t\tokText: 'Yes',\r\n\t\t\tcancelText: 'Cancel',\r\n\t\t\tonOk() {\r\n\t\t\t\tconst newOrder = ordered.filter(elm => elm !== title)\r\n\t\t\t\tconst newColumns = {}\r\n\t\t\t\tObject.assign(newColumns, columns)\r\n\t\t\t\tdelete newColumns[title]\r\n\t\t\t\tupdateColumns(newColumns)\r\n\t\t\t\tupdateOrdered(newOrder)\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Draggable draggableId={title} index={index}>\r\n\t\t\t{\r\n\t\t\t\t(provided, snapshot) => (\r\n\t\t\t\t\t<div className=\"board-column\" ref={provided.innerRef} {...provided.draggableProps}>\r\n\t\t\t\t\t\t<div className=\"board-title\" {...provided.dragHandleProps}>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\trenameActive === title ? (\r\n\t\t\t\t\t\t\t\t\t<RenameForm title={title} finish={onFinish} />\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t<h4 className=\"mb-0\" >{title}</h4>\r\n\t\t\t\t\t\t\t\t\t\t<EllipsisDropdown menu={\r\n\t\t\t\t\t\t\t\t\t\t\t<Menu>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Menu.Item onClick={() => onTitleClick(title)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<EditOutlined />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>Rename Board</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Menu.Item onClick={() => onBoardDelete(title)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<DeleteOutlined />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>Delete Board</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t</Menu>\r\n\t\t\t\t\t\t\t\t\t\t}/>\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<BoardCard\r\n\t\t\t\t\t\t\tlistId={title}\r\n\t\t\t\t\t\t\tlistType=\"CONTENT\"\r\n\t\t\t\t\t\t\tclassName={snapshot.isDragging ? 'is-dragging' : ''}\r\n\t\t\t\t\t\t\tcontents={contents}\r\n\t\t\t\t\t\t\tinternalScroll={isScrollable}\r\n\t\t\t\t\t\t\tisCombineEnabled={isCombineEnabled}\r\n\t\t\t\t\t\t\tuseClone={useClone}\r\n\t\t\t\t\t\t\tcardData={onUpdateCardModal}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<div className=\"board-add\" onClick={() => newCard(title)}>\r\n\t\t\t\t\t\t\t<div>Add task</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</Draggable>\r\n\t)\r\n}\r\n\r\nexport default Board\r\n"]},"metadata":{},"sourceType":"module"}